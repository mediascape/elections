{
  "name": "redis",
  "version": "1.0.0",
  "description": "Redis client library",
  "keywords": [
    "database",
    "redis"
  ],
  "author": {
    "name": "Matt Ranney",
    "email": "mjr@ranney.com"
  },
  "license": "MIT",
  "main": "./index.js",
  "scripts": {
    "coverage": "nyc report --reporter=text-lcov | coveralls",
    "test": "nyc ./node_modules/.bin/_mocha ./test/*.js ./test/commands/*.js ./test/parser/*.js --timeout=8000"
  },
  "devDependencies": {
    "async": "^1.3.0",
    "colors": "~0.6.0-1",
    "coveralls": "^2.11.2",
    "hiredis": "^0.4.1",
    "metrics": ">=0.1.5",
    "mocha": "^2.2.5",
    "nyc": "^3.0.0",
    "tcp-port-used": "^0.1.2",
    "underscore": "~1.4.4",
    "uuid": "^2.0.1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mranney/node_redis.git"
  },
  "readme": "redis - a node.js redis client\n===========================\n\n[![Build Status](https://travis-ci.org/NodeRedis/node_redis.png)](https://travis-ci.org/NodeRedis/node_redis)\n[![Coverage Status](https://coveralls.io/repos/NodeRedis/node_redis/badge.svg?branch=)](https://coveralls.io/r/NodeRedis/node_redis?branch=)\n\nThis is a complete Redis client for node.js.  It supports all Redis commands,\nincluding many recently added commands like EVAL from experimental Redis server\nbranches.\n\nInstall with:\n\n    npm install redis\n\n## Usage\n\nSimple example, included as `examples/simple.js`:\n\n```js\n    var redis = require(\"redis\"),\n        client = redis.createClient();\n\n    // if you'd like to select database 3, instead of 0 (default), call\n    // client.select(3, function() { /* ... */ });\n\n    client.on(\"error\", function (err) {\n        console.log(\"Error \" + err);\n    });\n\n    client.set(\"string key\", \"string val\", redis.print);\n    client.hset(\"hash key\", \"hashtest 1\", \"some value\", redis.print);\n    client.hset([\"hash key\", \"hashtest 2\", \"some other value\"], redis.print);\n    client.hkeys(\"hash key\", function (err, replies) {\n        console.log(replies.length + \" replies:\");\n        replies.forEach(function (reply, i) {\n            console.log(\"    \" + i + \": \" + reply);\n        });\n        client.quit();\n    });\n```\n\nThis will display:\n\n    mjr:~/work/node_redis (master)$ node example.js\n    Reply: OK\n    Reply: 0\n    Reply: 0\n    2 replies:\n        0: hashtest 1\n        1: hashtest 2\n    mjr:~/work/node_redis (master)$\n\nNote that the API is entire asynchronous. To get data back from the server,\nyou'll need to use a callback. The return value from most of the API is a\nbackpressure indicator.\n\n### Sending Commands\n\nEach Redis command is exposed as a function on the `client` object.\nAll functions take either an `args` Array plus optional `callback` Function or\na variable number of individual arguments followed by an optional callback.\nHere is an example of passing an array of arguments and a callback:\n\n    client.mset([\"test keys 1\", \"test val 1\", \"test keys 2\", \"test val 2\"], function (err, res) {});\n\nHere is that same call in the second style:\n\n    client.mset(\"test keys 1\", \"test val 1\", \"test keys 2\", \"test val 2\", function (err, res) {});\n\nNote that in either form the `callback` is optional:\n\n    client.set(\"some key\", \"some val\");\n    client.set([\"some other key\", \"some val\"]);\n\nIf the key is missing, reply will be null (probably):\n\n    client.get(\"missingkey\", function(err, reply) {\n        // reply is null when the key is missing\n        console.log(reply);\n    });\n\nFor a list of Redis commands, see [Redis Command Reference](http://redis.io/commands)\n\nThe commands can be specified in uppercase or lowercase for convenience.  `client.get()` is the same as `client.GET()`.\n\nMinimal parsing is done on the replies.  Commands that return a single line reply return JavaScript Strings,\ninteger replies return JavaScript Numbers, \"bulk\" replies return node Buffers, and \"multi bulk\" replies return a\nJavaScript Array of node Buffers.  `HGETALL` returns an Object with Buffers keyed by the hash keys.\n\n# API\n\n## Connection Events\n\n`client` will emit some events about the state of the connection to the Redis server.\n\n### \"ready\"\n\n`client` will emit `ready` once a connection is established to the Redis server and the server reports\nthat it is ready to receive commands.  Commands issued before the `ready` event are queued,\nthen replayed just before this event is emitted.\n\n### \"connect\"\n\n`client` will emit `connect` at the same time as it emits `ready` unless `client.options.no_ready_check`\nis set.  If this options is set, `connect` will be emitted when the stream is connected, and then\nyou are free to try to send commands.\n\n### \"error\"\n\n`client` will emit `error` when encountering an error connecting to the Redis server.\n\nNote that \"error\" is a special event type in node.  If there are no listeners for an\n\"error\" event, node will exit.  This is usually what you want, but it can lead to some\ncryptic error messages like this:\n\n    mjr:~/work/node_redis (master)$ node example.js\n\n    node.js:50\n        throw e;\n        ^\n    Error: ECONNREFUSED, Connection refused\n        at IOWatcher.callback (net:870:22)\n        at node.js:607:9\n\nNot very useful in diagnosing the problem, but if your program isn't ready to handle this,\nit is probably the right thing to just exit.\n\n`client` will also emit `error` if an exception is thrown inside of `node_redis` for whatever reason.\nIt would be nice to distinguish these two cases.\n\n### \"end\"\n\n`client` will emit `end` when an established Redis server connection has closed.\n\n### \"drain\"\n\n`client` will emit `drain` when the TCP connection to the Redis server has been buffering, but is now\nwritable.  This event can be used to stream commands in to Redis and adapt to backpressure.  Right now,\nyou need to check `client.command_queue.length` to decide when to reduce your send rate.  Then you can\nresume sending when you get `drain`.\n\n### \"idle\"\n\n`client` will emit `idle` when there are no outstanding commands that are awaiting a response.\n\n## redis.createClient()\nIf you have `redis-server` running on the same computer as node, then the defaults for\nport and host are probably fine and you don't need to supply any arguments. `createClient()` returns a `RedisClient` object.\n\n### overloading\n* `redis.createClient(port,host,options)`\n* `redis.createClient()` is equivalent to `redis.createClient(6379, '127.0.0.1', {})`\n* `redis.createClient(options)` is equivalent to `redis.createClient(6379, '127.0.0.1', options)`\n* `redis.createClient(unix_socket, options)`\n\n `options` is an object with the following possible properties:\n\n* `parser`: which Redis protocol reply parser to use.  Defaults to `hiredis` if that module is installed.\nThis may also be set to `javascript`.\n* `return_buffers`: defaults to `false`.  If set to `true`, then all replies will be sent to callbacks as node Buffer\nobjects instead of JavaScript Strings.\n* `detect_buffers`: default to `false`. If set to `true`, then replies will be sent to callbacks as node Buffer objects\nif any of the input arguments to the original command were Buffer objects.\nThis option lets you switch between Buffers and Strings on a per-command basis, whereas `return_buffers` applies to\nevery command on a client.\n* `socket_nodelay`: defaults to `true`. Whether to call setNoDelay() on the TCP stream, which disables the\nNagle algorithm on the underlying socket.  Setting this option to `false` can result in additional throughput at the\ncost of more latency.  Most applications will want this set to `true`.\n* `socket_keepalive` defaults to `true`. Whether the keep-alive functionality is enabled on the underlying socket.\n* `no_ready_check`: defaults to `false`. When a connection is established to the Redis server, the server might still\nbe loading the database from disk.  While loading, the server not respond to any commands.  To work around this,\n`node_redis` has a \"ready check\" which sends the `INFO` command to the server.  The response from the `INFO` command\nindicates whether the server is ready for more commands.  When ready, `node_redis` emits a `ready` event.\nSetting `no_ready_check` to `true` will inhibit this check.\n* `enable_offline_queue`: defaults to `true`. By default, if there is no active\nconnection to the redis server, commands are added to a queue and are executed\nonce the connection has been established. Setting `enable_offline_queue` to\n`false` will disable this feature and the callback will be execute immediately\nwith an error, or an error will be thrown if no callback is specified.\n* `retry_max_delay`: defaults to `null`. By default every time the client tries to connect and fails time before\nreconnection (delay) almost doubles. This delay normally grows infinitely, but setting `retry_max_delay` limits delay\nto maximum value, provided in milliseconds.\n* `connect_timeout` defaults to `false`. By default client will try reconnecting until connected. Setting `connect_timeout`\nlimits total time for client to reconnect. Value is provided in milliseconds and is counted once the disconnect occured.\n* `max_attempts` defaults to `null`. By default client will try reconnecting until connected. Setting `max_attempts`\nlimits total amount of reconnects.\n* `auth_pass` defaults to `null`. By default client will try connecting without auth. If set, client will run redis auth command on connect.\n* `family` defaults to `IPv4`. The client connects in IPv4 if not specified or if the DNS resolution returns an IPv4 address.\nYou can force an IPv6 if you set the family to 'IPv6'. See nodejs net or dns modules how to use the family type.\n\n```js\n    var redis = require(\"redis\"),\n        client = redis.createClient({detect_buffers: true});\n\n    client.set(\"foo_rand000000000000\", \"OK\");\n\n    // This will return a JavaScript String\n    client.get(\"foo_rand000000000000\", function (err, reply) {\n        console.log(reply.toString()); // Will print `OK`\n    });\n\n    // This will return a Buffer since original key is specified as a Buffer\n    client.get(new Buffer(\"foo_rand000000000000\"), function (err, reply) {\n        console.log(reply.toString()); // Will print `<Buffer 4f 4b>`\n    });\n    client.end();\n```\n\n\n\n## client.auth(password, callback)\n\nWhen connecting to Redis servers that require authentication, the `AUTH` command must be sent as the\nfirst command after connecting.  This can be tricky to coordinate with reconnections, the ready check,\netc.  To make this easier, `client.auth()` stashes `password` and will send it after each connection,\nincluding reconnections.  `callback` is invoked only once, after the response to the very first\n`AUTH` command sent.\nNOTE: Your call to `client.auth()` should not be inside the ready handler. If\nyou are doing this wrong, `client` will emit an error that looks\nsomething like this `Error: Ready check failed: ERR operation not permitted`.\n\n## client.end()\n\nForcibly close the connection to the Redis server.  Note that this does not wait until all replies have been parsed.\nIf you want to exit cleanly, call `client.quit()` to send the `QUIT` command after you have handled all replies.\n\nThis example closes the connection to the Redis server before the replies have been read.  You probably don't\nwant to do this:\n\n```js\n    var redis = require(\"redis\"),\n        client = redis.createClient();\n\n    client.set(\"foo_rand000000000000\", \"some fantastic value\");\n    client.get(\"foo_rand000000000000\", function (err, reply) {\n        console.log(reply.toString());\n    });\n    client.end();\n```\n\n`client.end()` is useful for timeout cases where something is stuck or taking too long and you want\nto start over.\n\n## client.unref()\n\nCall `unref()` on the underlying socket connection to the Redis server, allowing the program to exit once no more commands are pending.\n\nThis is an **experimental** feature, and only supports a subset of the Redis protocol. Any commands where client state is saved on the Redis server, e.g. `*SUBSCRIBE` or the blocking `BL*` commands will *NOT* work with `.unref()`.\n\n```js\nvar redis = require(\"redis\")\nvar client = redis.createClient()\n\n/*\n    Calling unref() will allow this program to exit immediately after the get command finishes. Otherwise the client would hang as long as the client-server connection is alive.\n*/\nclient.unref()\nclient.get(\"foo\", function (err, value){\n    if (err) throw(err)\n    console.log(value)\n})\n```\n\n## Friendlier hash commands\n\nMost Redis commands take a single String or an Array of Strings as arguments, and replies are sent back as a single String or an Array of Strings.\nWhen dealing with hash values, there are a couple of useful exceptions to this.\n\n### client.hgetall(hash)\n\nThe reply from an HGETALL command will be converted into a JavaScript Object by `node_redis`.  That way you can interact\nwith the responses using JavaScript syntax.\n\nExample:\n\n    client.hmset(\"hosts\", \"mjr\", \"1\", \"another\", \"23\", \"home\", \"1234\");\n    client.hgetall(\"hosts\", function (err, obj) {\n        console.dir(obj);\n    });\n\nOutput:\n\n    { mjr: '1', another: '23', home: '1234' }\n\n### client.hmset(hash, obj, [callback])\n\nMultiple values in a hash can be set by supplying an object:\n\n    client.HMSET(key2, {\n        \"0123456789\": \"abcdefghij\", // NOTE: key and value will be coerced to strings\n        \"some manner of key\": \"a type of value\"\n    });\n\nThe properties and values of this Object will be set as keys and values in the Redis hash.\n\n### client.hmset(hash, key1, val1, ... keyn, valn, [callback])\n\nMultiple values may also be set by supplying a list:\n\n    client.HMSET(key1, \"0123456789\", \"abcdefghij\", \"some manner of key\", \"a type of value\");\n\n\n## Publish / Subscribe\n\nHere is a simple example of the API for publish / subscribe.  This program opens two\nclient connections, subscribes to a channel on one of them, and publishes to that\nchannel on the other:\n\n```js\n    var redis = require(\"redis\"),\n        client1 = redis.createClient(), client2 = redis.createClient(),\n        msg_count = 0;\n\n    client1.on(\"subscribe\", function (channel, count) {\n        client2.publish(\"a nice channel\", \"I am sending a message.\");\n        client2.publish(\"a nice channel\", \"I am sending a second message.\");\n        client2.publish(\"a nice channel\", \"I am sending my last message.\");\n    });\n\n    client1.on(\"message\", function (channel, message) {\n        console.log(\"client1 channel \" + channel + \": \" + message);\n        msg_count += 1;\n        if (msg_count === 3) {\n            client1.unsubscribe();\n            client1.end();\n            client2.end();\n        }\n    });\n\n    client1.incr(\"did a thing\");\n    client1.subscribe(\"a nice channel\");\n```\n\nWhen a client issues a `SUBSCRIBE` or `PSUBSCRIBE`, that connection is put into a \"subscriber\" mode.\nAt that point, only commands that modify the subscription set are valid.  When the subscription\nset is empty, the connection is put back into regular mode.\n\nIf you need to send regular commands to Redis while in subscriber mode, just open another connection.\n\n## Subscriber Events\n\nIf a client has subscriptions active, it may emit these events:\n\n### \"message\" (channel, message)\n\nClient will emit `message` for every message received that matches an active subscription.\nListeners are passed the channel name as `channel` and the message Buffer as `message`.\n\n### \"pmessage\" (pattern, channel, message)\n\nClient will emit `pmessage` for every message received that matches an active subscription pattern.\nListeners are passed the original pattern used with `PSUBSCRIBE` as `pattern`, the sending channel\nname as `channel`, and the message Buffer as `message`.\n\n### \"subscribe\" (channel, count)\n\nClient will emit `subscribe` in response to a `SUBSCRIBE` command.  Listeners are passed the\nchannel name as `channel` and the new count of subscriptions for this client as `count`.\n\n### \"psubscribe\" (pattern, count)\n\nClient will emit `psubscribe` in response to a `PSUBSCRIBE` command.  Listeners are passed the\noriginal pattern as `pattern`, and the new count of subscriptions for this client as `count`.\n\n### \"unsubscribe\" (channel, count)\n\nClient will emit `unsubscribe` in response to a `UNSUBSCRIBE` command.  Listeners are passed the\nchannel name as `channel` and the new count of subscriptions for this client as `count`.  When\n`count` is 0, this client has left subscriber mode and no more subscriber events will be emitted.\n\n### \"punsubscribe\" (pattern, count)\n\nClient will emit `punsubscribe` in response to a `PUNSUBSCRIBE` command.  Listeners are passed the\nchannel name as `channel` and the new count of subscriptions for this client as `count`.  When\n`count` is 0, this client has left subscriber mode and no more subscriber events will be emitted.\n\n## client.multi([commands])\n\n`MULTI` commands are queued up until an `EXEC` is issued, and then all commands are run atomically by\nRedis.  The interface in `node_redis` is to return an individual `Multi` object by calling `client.multi()`.\n\n```js\n    var redis  = require(\"./index\"),\n        client = redis.createClient(), set_size = 20;\n\n    client.sadd(\"bigset\", \"a member\");\n    client.sadd(\"bigset\", \"another member\");\n\n    while (set_size > 0) {\n        client.sadd(\"bigset\", \"member \" + set_size);\n        set_size -= 1;\n    }\n\n    // multi chain with an individual callback\n    client.multi()\n        .scard(\"bigset\")\n        .smembers(\"bigset\")\n        .keys(\"*\", function (err, replies) {\n            // NOTE: code in this callback is NOT atomic\n            // this only happens after the the .exec call finishes.\n            client.mget(replies, redis.print);\n        })\n        .dbsize()\n        .exec(function (err, replies) {\n            console.log(\"MULTI got \" + replies.length + \" replies\");\n            replies.forEach(function (reply, index) {\n                console.log(\"Reply \" + index + \": \" + reply.toString());\n            });\n        });\n```\n\n### Multi.exec( callback )\n\n`client.multi()` is a constructor that returns a `Multi` object.  `Multi` objects share all of the\nsame command methods as `client` objects do.  Commands are queued up inside the `Multi` object\nuntil `Multi.exec()` is invoked.\n\nThe `callback` of `.exec()` will get invoked with two arguments:\n\n* `err` **type:** `null | Array` err is either null or an array of Error Objects corresponding the the sequence the commands where chained. The last item of the array will always be an `EXECABORT` type of error originating from the `.exec()` itself.\n* `results` **type:** `null | Array` results is an array of responses corresponding the the sequence the commands where chained.\n\nYou can either chain together `MULTI` commands as in the above example, or you can queue individual\ncommands while still sending regular client command as in this example:\n\n```js\n    var redis  = require(\"redis\"),\n        client = redis.createClient(), multi;\n\n    // start a separate multi command queue\n    multi = client.multi();\n    multi.incr(\"incr thing\", redis.print);\n    multi.incr(\"incr other thing\", redis.print);\n\n    // runs immediately\n    client.mset(\"incr thing\", 100, \"incr other thing\", 1, redis.print);\n\n    // drains multi queue and runs atomically\n    multi.exec(function (err, replies) {\n        console.log(replies); // 101, 2\n    });\n\n    // you can re-run the same transaction if you like\n    multi.exec(function (err, replies) {\n        console.log(replies); // 102, 3\n        client.quit();\n    });\n```\n\nIn addition to adding commands to the `MULTI` queue individually, you can also pass an array\nof commands and arguments to the constructor:\n\n```js\n    var redis  = require(\"redis\"),\n        client = redis.createClient(), multi;\n\n    client.multi([\n        [\"mget\", \"multifoo\", \"multibar\", redis.print],\n        [\"incr\", \"multifoo\"],\n        [\"incr\", \"multibar\"]\n    ]).exec(function (err, replies) {\n        console.log(replies);\n    });\n```\n\n\n## Monitor mode\n\nRedis supports the `MONITOR` command, which lets you see all commands received by the Redis server\nacross all client connections, including from other client libraries and other computers.\n\nAfter you send the `MONITOR` command, no other commands are valid on that connection.  `node_redis`\nwill emit a `monitor` event for every new monitor message that comes across.  The callback for the\n`monitor` event takes a timestamp from the Redis server and an array of command arguments.\n\nHere is a simple example:\n\n```js\n    var client  = require(\"redis\").createClient(),\n        util = require(\"util\");\n\n    client.monitor(function (err, res) {\n        console.log(\"Entering monitoring mode.\");\n    });\n\n    client.on(\"monitor\", function (time, args) {\n        console.log(time + \": \" + util.inspect(args));\n    });\n```\n\n# Extras\n\nSome other things you might like to know about.\n\n## client.server_info\n\nAfter the ready probe completes, the results from the INFO command are saved in the `client.server_info`\nobject.\n\nThe `versions` key contains an array of the elements of the version string for easy comparison.\n\n    > client.server_info.redis_version\n    '2.3.0'\n    > client.server_info.versions\n    [ 2, 3, 0 ]\n\n## redis.print()\n\nA handy callback function for displaying return values when testing.  Example:\n\n```js\n    var redis = require(\"redis\"),\n        client = redis.createClient();\n\n    client.on(\"connect\", function () {\n        client.set(\"foo_rand000000000000\", \"some fantastic value\", redis.print);\n        client.get(\"foo_rand000000000000\", redis.print);\n    });\n```\n\nThis will print:\n\n    Reply: OK\n    Reply: some fantastic value\n\nNote that this program will not exit cleanly because the client is still connected.\n\n## redis.debug_mode\n\nBoolean to enable debug mode and protocol tracing.\n\n```js\n    var redis = require(\"redis\"),\n        client = redis.createClient();\n\n    redis.debug_mode = true;\n\n    client.on(\"connect\", function () {\n        client.set(\"foo_rand000000000000\", \"some fantastic value\");\n    });\n```\n\nThis will display:\n\n    mjr:~/work/node_redis (master)$ node ~/example.js\n    send command: *3\n    $3\n    SET\n    $20\n    foo_rand000000000000\n    $20\n    some fantastic value\n\n    on_data: +OK\n\n`send command` is data sent into Redis and `on_data` is data received from Redis.\n\n## Multi-word commands\n\nTo execute redis multi-word commands like `SCRIPT LOAD` or `CLIENT LIST` pass\nthe second word as first parameter:\n\n    client.script('load', 'return 1');\n    client.multi().script('load', 'return 1').exec(...);\n    client.multi([['script', 'load', 'return 1']]).exec(...);\n\n## client.send_command(command_name, args, callback)\n\nUsed internally to send commands to Redis.  For convenience, nearly all commands that are published on the Redis\nWiki have been added to the `client` object.  However, if I missed any, or if new commands are introduced before\nthis library is updated, you can use `send_command()` to send arbitrary commands to Redis.\n\nAll commands are sent as multi-bulk commands.  `args` can either be an Array of arguments, or omitted.\n\n## client.connected\n\nBoolean tracking the state of the connection to the Redis server.\n\n## client.command_queue.length\n\nThe number of commands that have been sent to the Redis server but not yet replied to.  You can use this to\nenforce some kind of maximum queue depth for commands while connected.\n\nDon't mess with `client.command_queue` though unless you really know what you are doing.\n\n## client.offline_queue.length\n\nThe number of commands that have been queued up for a future connection.  You can use this to enforce\nsome kind of maximum queue depth for pre-connection commands.\n\n## client.retry_delay\n\nCurrent delay in milliseconds before a connection retry will be attempted.  This starts at `250`.\n\n## client.retry_backoff\n\nMultiplier for future retry timeouts.  This should be larger than 1 to add more time between retries.\nDefaults to 1.7.  The default initial connection retry is 250, so the second retry will be 425, followed by 723.5, etc.\n\n### Commands with Optional and Keyword arguments\n\nThis applies to anything that uses an optional `[WITHSCORES]` or `[LIMIT offset count]` in the [redis.io/commands](http://redis.io/commands) documentation.\n\nExample:\n```js\nvar args = [ 'myzset', 1, 'one', 2, 'two', 3, 'three', 99, 'ninety-nine' ];\nclient.zadd(args, function (err, response) {\n    if (err) throw err;\n    console.log('added '+response+' items.');\n\n    // -Infinity and +Infinity also work\n    var args1 = [ 'myzset', '+inf', '-inf' ];\n    client.zrevrangebyscore(args1, function (err, response) {\n        if (err) throw err;\n        console.log('example1', response);\n        // write your code here\n    });\n\n    var max = 3, min = 1, offset = 1, count = 2;\n    var args2 = [ 'myzset', max, min, 'WITHSCORES', 'LIMIT', offset, count ];\n    client.zrevrangebyscore(args2, function (err, response) {\n        if (err) throw err;\n        console.log('example2', response);\n        // write your code here\n    });\n});\n```\n\n## Performance\n\nMuch effort has been spent to make `node_redis` as fast as possible for common\noperations. As pipelining happens naturally from shared connections, overall\nefficiency goes up.\n\nHere are typical results of `multi_bench.js` which is similar to\n`redis-benchmark` from the Redis distribution.  It uses 5 concurrent connections\nand shows the difference between pipelines of 1 and 50.\n\nJavaScript parser:\n\n\tClient count: 5, node version: 0.10.32, server version: 2.8.18, parser: javascript\n\tPING,             1/5 min/max/avg/p95:    0/   3/   0.05/   1.00   1103ms total, 18132.37 ops/sec\n\tPING,            50/5 min/max/avg/p95:    0/   4/   0.81/   2.00    327ms total, 61162.08 ops/sec\n\tSET 4B str,       1/5 min/max/avg/p95:    0/   2/   0.05/   0.00   1104ms total, 18115.94 ops/sec\n\tSET 4B str,      50/5 min/max/avg/p95:    0/   3/   0.83/   2.00    333ms total, 60060.06 ops/sec\n\tSET 4B buf,       1/5 min/max/avg/p95:    0/   2/   0.09/   1.00   1876ms total, 10660.98 ops/sec\n\tSET 4B buf,      50/5 min/max/avg/p95:    0/  11/   2.55/   4.00   1025ms total, 19512.20 ops/sec\n\tGET 4B str,       1/5 min/max/avg/p95:    0/   1/   0.05/   1.00   1117ms total, 17905.10 ops/sec\n\tGET 4B str,      50/5 min/max/avg/p95:    0/   3/   0.87/   2.00    347ms total, 57636.89 ops/sec\n\tGET 4B buf,       1/5 min/max/avg/p95:    0/   1/   0.05/   1.00   1110ms total, 18018.02 ops/sec\n\tGET 4B buf,      50/5 min/max/avg/p95:    0/   2/   0.85/   2.00    342ms total, 58479.53 ops/sec\n\tSET 4KiB str,     1/5 min/max/avg/p95:    0/   1/   0.05/   1.00   1119ms total, 17873.10 ops/sec\n\tSET 4KiB str,    50/5 min/max/avg/p95:    0/   3/   0.89/   2.00    358ms total, 55865.92 ops/sec\n\tSET 4KiB buf,     1/5 min/max/avg/p95:    0/   1/   0.09/   1.00   1894ms total, 10559.66 ops/sec\n\tSET 4KiB buf,    50/5 min/max/avg/p95:    0/   7/   2.57/   4.00   1031ms total, 19398.64 ops/sec\n\tGET 4KiB str,     1/5 min/max/avg/p95:    0/   6/   0.06/   1.00   1248ms total, 16025.64 ops/sec\n\tGET 4KiB str,    50/5 min/max/avg/p95:    0/   3/   1.03/   2.00    415ms total, 48192.77 ops/sec\n\tGET 4KiB buf,     1/5 min/max/avg/p95:    0/   1/   0.06/   1.00   1177ms total, 16992.35 ops/sec\n\tGET 4KiB buf,    50/5 min/max/avg/p95:    0/  10/   1.02/   2.00    409ms total, 48899.76 ops/sec\n\tINCR,             1/5 min/max/avg/p95:    0/   2/   0.05/   0.55   1137ms total, 17590.15 ops/sec\n\tINCR,            50/5 min/max/avg/p95:    0/   2/   0.85/   2.00    343ms total, 58309.04 ops/sec\n\tLPUSH,            1/5 min/max/avg/p95:    0/   1/   0.06/   1.00   1143ms total, 17497.81 ops/sec\n\tLPUSH,           50/5 min/max/avg/p95:    0/   3/   0.87/   2.00    350ms total, 57142.86 ops/sec\n\tLRANGE 10,        1/5 min/max/avg/p95:    0/   2/   0.06/   1.00   1283ms total, 15588.46 ops/sec\n\tLRANGE 10,       50/5 min/max/avg/p95:    0/   3/   1.12/   2.00    449ms total, 44543.43 ops/sec\n\tLRANGE 100,       1/5 min/max/avg/p95:    0/   1/   0.09/   1.00   1932ms total, 10351.97 ops/sec\n\tLRANGE 100,      50/5 min/max/avg/p95:    0/   5/   2.46/   4.00    985ms total, 20304.57 ops/sec\n\tSET 4MiB buf,     1/5 min/max/avg/p95:    1/   4/   1.37/   2.00    691ms total,   723.59 ops/sec\n\tSET 4MiB buf,    50/5 min/max/avg/p95:    3/ 166/  57.66/ 116.00    601ms total,   831.95 ops/sec\n\tGET 4MiB str,     1/5 min/max/avg/p95:   84/ 110/  93.18/ 106.95   9320ms total,    10.73 ops/sec\n\tGET 4MiB str,    50/5 min/max/avg/p95:  156/7375/3400.10/6840.40   8928ms total,    11.20 ops/sec\n\tGET 4MiB buf,     1/5 min/max/avg/p95:   84/ 105/  91.21/  99.00   9129ms total,    10.95 ops/sec\n\tGET 4MiB buf,    50/5 min/max/avg/p95:  424/5704/3518.94/5626.65   9145ms total,    10.93 ops/sec\n\nIf you use very large responses in your application, the JavaScript parser\nperforms badly. Until the JS parser is fixed, you can use the C-based `hiredis`\nparser bound to the official `hiredis` C library. To use `hiredis`, do:\n\n    npm install hiredis redis\n\nIf the `hiredis` npm module is installed, `node_redis` will use it by default.\nOtherwise, the pure JavaScript parser will be used.\n\nIf you use `hiredis`, be sure to rebuild it whenever you upgrade your version of\nnode.  There are mysterious failures that can happen between node and native\ncode modules after a node upgrade.\n\nMost users find that the JS parser is faster than the `hiredis` parser. Because\nof the pain associated with upgrading native code modules, you should only use\n`hiredis` if your application needs it.\n\nhiredis parser:\n\n\tClient count: 5, node version: 0.10.32, server version: 2.8.18, parser: hiredis\n\tPING,             1/5 min/max/avg/p95:    0/   3/   0.05/   1.00   1092ms total, 18315.02 ops/sec\n\tPING,            50/5 min/max/avg/p95:    0/   5/   0.87/   2.00    347ms total, 57636.89 ops/sec\n\tSET 4B str,       1/5 min/max/avg/p95:    0/   2/   0.06/   1.00   1151ms total, 17376.19 ops/sec\n\tSET 4B str,      50/5 min/max/avg/p95:    0/   3/   0.83/   2.00    334ms total, 59880.24 ops/sec\n\tSET 4B buf,       1/5 min/max/avg/p95:    0/   3/   0.09/   1.00   1932ms total, 10351.97 ops/sec\n\tSET 4B buf,      50/5 min/max/avg/p95:    0/   9/   2.64/   4.00   1059ms total, 18885.74 ops/sec\n\tGET 4B str,       1/5 min/max/avg/p95:    0/   1/   0.06/   0.00   1185ms total, 16877.64 ops/sec\n\tGET 4B str,      50/5 min/max/avg/p95:    0/   3/   0.85/   2.00    341ms total, 58651.03 ops/sec\n\tGET 4B buf,       1/5 min/max/avg/p95:    0/   1/   0.06/   0.00   1179ms total, 16963.53 ops/sec\n\tGET 4B buf,      50/5 min/max/avg/p95:    0/   3/   0.85/   2.00    340ms total, 58823.53 ops/sec\n\tSET 4KiB str,     1/5 min/max/avg/p95:    0/   1/   0.06/   1.00   1210ms total, 16528.93 ops/sec\n\tSET 4KiB str,    50/5 min/max/avg/p95:    0/   3/   0.93/   2.00    372ms total, 53763.44 ops/sec\n\tSET 4KiB buf,     1/5 min/max/avg/p95:    0/   1/   0.10/   1.00   1967ms total, 10167.77 ops/sec\n\tSET 4KiB buf,    50/5 min/max/avg/p95:    0/   6/   2.63/   4.00   1053ms total, 18993.35 ops/sec\n\tGET 4KiB str,     1/5 min/max/avg/p95:    0/   6/   0.06/   1.00   1176ms total, 17006.80 ops/sec\n\tGET 4KiB str,    50/5 min/max/avg/p95:    0/   4/   1.00/   2.00    399ms total, 50125.31 ops/sec\n\tGET 4KiB buf,     1/5 min/max/avg/p95:    0/   1/   0.06/   1.00   1158ms total, 17271.16 ops/sec\n\tGET 4KiB buf,    50/5 min/max/avg/p95:    0/   3/   0.99/   2.00    398ms total, 50251.26 ops/sec\n\tINCR,             1/5 min/max/avg/p95:    0/   1/   0.05/   0.00   1112ms total, 17985.61 ops/sec\n\tINCR,            50/5 min/max/avg/p95:    0/   3/   0.84/   2.00    339ms total, 58997.05 ops/sec\n\tLPUSH,            1/5 min/max/avg/p95:    0/   1/   0.05/   1.00   1131ms total, 17683.47 ops/sec\n\tLPUSH,           50/5 min/max/avg/p95:    0/   3/   0.86/   2.00    345ms total, 57971.01 ops/sec\n\tLRANGE 10,        1/5 min/max/avg/p95:    0/   1/   0.06/   1.00   1228ms total, 16286.64 ops/sec\n\tLRANGE 10,       50/5 min/max/avg/p95:    0/   3/   0.95/   2.00    382ms total, 52356.02 ops/sec\n\tLRANGE 100,       1/5 min/max/avg/p95:    0/   1/   0.08/   1.00   1567ms total, 12763.24 ops/sec\n\tLRANGE 100,      50/5 min/max/avg/p95:    0/   6/   1.68/   3.00    675ms total, 29629.63 ops/sec\n\tSET 4MiB buf,     1/5 min/max/avg/p95:    1/   4/   1.37/   2.00    692ms total,   722.54 ops/sec\n\tSET 4MiB buf,    50/5 min/max/avg/p95:    3/ 183/  57.79/ 125.00    605ms total,   826.45 ops/sec\n\tGET 4MiB str,     1/5 min/max/avg/p95:    5/  16/   8.14/  12.95    816ms total,   122.55 ops/sec\n\tGET 4MiB str,    50/5 min/max/avg/p95:   24/ 323/ 202.98/ 309.00    519ms total,   192.68 ops/sec\n\tGET 4MiB buf,     1/5 min/max/avg/p95:    6/  13/   8.01/  11.95    802ms total,   124.69 ops/sec\n\tGET 4MiB buf,    50/5 min/max/avg/p95:   16/ 480/ 203.85/ 435.70    531ms total,   188.32 ops/sec\n\n## TODO\n\nBetter tests for auth, disconnect/reconnect, and all combinations thereof.\n\nStream large set/get values into and out of Redis.  Otherwise the entire value must be in node's memory.\n\nPerformance can be better for very large values.\n\nI think there are more performance improvements left in there for smaller values, especially for large lists of small values.\n\n## How to Contribute\n- open a pull request and then wait for feedback (if\n  [DTrejo](http://github.com/dtrejo) does not get back to you within 2 days,\n  comment again with indignation!)\n\n## Contributors\nMany people have have added features and fixed bugs in `node_redis`.\n\nOrdered by date of first contribution.\n[Auto-generated](http://github.com/dtrejo/node-authors) on Wed Jul 25 2012 19:14:59 GMT-0700 (PDT).\n\n- [Matt Ranney aka `mranney`](https://github.com/mranney)\n- [Tim-Smart aka `tim-smart`](https://github.com/tim-smart)\n- [Tj Holowaychuk aka `visionmedia`](https://github.com/visionmedia)\n- [rick aka `technoweenie`](https://github.com/technoweenie)\n- [Orion Henry aka `orionz`](https://github.com/orionz)\n- [Aivo Paas aka `aivopaas`](https://github.com/aivopaas)\n- [Hank Sims aka `hanksims`](https://github.com/hanksims)\n- [Paul Carey aka `paulcarey`](https://github.com/paulcarey)\n- [Pieter Noordhuis aka `pietern`](https://github.com/pietern)\n- [nithesh aka `nithesh`](https://github.com/nithesh)\n- [Andy Ray aka `andy2ray`](https://github.com/andy2ray)\n- [unknown aka `unknowdna`](https://github.com/unknowdna)\n- [Dave Hoover aka `redsquirrel`](https://github.com/redsquirrel)\n- [Vladimir Dronnikov aka `dvv`](https://github.com/dvv)\n- [Umair Siddique aka `umairsiddique`](https://github.com/umairsiddique)\n- [Louis-Philippe Perron aka `lp`](https://github.com/lp)\n- [Mark Dawson aka `markdaws`](https://github.com/markdaws)\n- [Ian Babrou aka `bobrik`](https://github.com/bobrik)\n- [Felix Geisendörfer aka `felixge`](https://github.com/felixge)\n- [Jean-Hugues Pinson aka `undefined`](https://github.com/undefined)\n- [Maksim Lin aka `maks`](https://github.com/maks)\n- [Owen Smith aka `orls`](https://github.com/orls)\n- [Zachary Scott aka `zzak`](https://github.com/zzak)\n- [TEHEK Firefox aka `TEHEK`](https://github.com/TEHEK)\n- [Isaac Z. Schlueter aka `isaacs`](https://github.com/isaacs)\n- [David Trejo aka `DTrejo`](https://github.com/DTrejo)\n- [Brian Noguchi aka `bnoguchi`](https://github.com/bnoguchi)\n- [Philip Tellis aka `bluesmoon`](https://github.com/bluesmoon)\n- [Marcus Westin aka `marcuswestin2`](https://github.com/marcuswestin2)\n- [Jed Schmidt aka `jed`](https://github.com/jed)\n- [Dave Peticolas aka `jdavisp3`](https://github.com/jdavisp3)\n- [Trae Robrock aka `trobrock`](https://github.com/trobrock)\n- [Shankar Karuppiah aka `shankar0306`](https://github.com/shankar0306)\n- [Ignacio Burgueño aka `ignacio`](https://github.com/ignacio)\n\nThanks.\n\n## LICENSE - \"MIT License\"\n\nCopyright (c) 2010 Matthew Ranney, http://ranney.com/\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mranney/node_redis/issues"
  },
  "_id": "redis@1.0.0",
  "_from": "redis@>=0.7.0"
}
