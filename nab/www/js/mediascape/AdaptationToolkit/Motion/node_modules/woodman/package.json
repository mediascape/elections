{
  "name": "woodman",
  "version": "1.1.0",
  "main": "./dist/woodman.js",
  "user": "Joshfire",
  "domain": "joshfire.com",
  "description": "Extensible JavaScript logger utility loosely based on log4j that runs client-side and server-side.",
  "homepage": "https://github.com/joshfire/woodman",
  "keywords": [
    "log4j",
    "logger",
    "console"
  ],
  "author": {
    "name": "Joshfire"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/joshfire/woodman.git"
  },
  "bugs": {
    "url": "http://github.com/joshfire/woodman/issues"
  },
  "maintainers": [
    {
      "name": "Joshfire",
      "email": "contact@joshfire.com",
      "url": "http://www.joshfire.com"
    }
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "LICENSE"
    }
  ],
  "dependencies": {
    "amdefine": "0.1.0",
    "socket.io": "0.9.16",
    "requirejs": "2.1.9",
    "esprima": "1.0.4",
    "node-fs": "0.1.7",
    "underscore": "1.5.2"
  },
  "devDependencies": {
    "grunt": "0.4.2",
    "grunt-contrib-concat": "0.3.0",
    "grunt-contrib-requirejs": "0.4.1",
    "grunt-contrib-jshint": "0.8.0",
    "jasmine-reporters": "0.2.1"
  },
  "readme": "# Woodman\n\nWoodman is a **JavaScript logger utility** for Web applications and Node.js applications. Woodman is roughly as simple to use as the `console`, only much more powerful. Woodman lets you take precise control over **what** gets logged **where** and **how**... and knows how to disappear from production code if needed. \n\n```javascript\n// Using Woodman                            // Using the console\nwoodman.load('console');\nvar logger = woodman.getLogger('myapp');\nlogger.log('Hello Woodman');                console.log('Hello Woodman');\nlogger.warn('This is a warning');           console.warn('This is a warning');\nlogger.error('This is an error');           console.error('This is an error');\n```\n\nWoodman features:\n\n- **message levels** similar to those exposed by the `console` object (`log`, `info`, `warn`, `error`). Through configuration, messages may be filtered based on their level.\n- a **logger hierarchy** to keep track of the origin of messages and disable some of them based on their origin.\n- **appenders** to change the destination where messages are sent without changing the code. Messages can be sent to multiple destinations at once. Examples of appenders include the `console`, a log file or a remote server using Web sockets. New appenders can easily be created.\n- **layouts** to specify the format and structure of the messages sent to an appender: raw string, CSV, JSON, XML, whatever. New layouts can easily be created.\n- **filters** to disable messages based on something else than their level or origin.\n- a **removal tool** that drops all traces of Woodman from your code to create a shipping version of your app without logs. With Woodman, no more `console.log` in your production code! See [Precompilation](#precompilation) for details.\n\nWherever applicable, Woodman follows the architecture, terminology and API of the [Apache Log4j 2](http://logging.apache.org/log4j/2.x/) project.\n\nTo get started with Woodman, check the [documentation Web site](http://joshfire.github.io/woodman/).\n\n## License\n\nThe Woodman library is licensed under the [MIT license](https://raw.github.com/joshfire/woodman/master/LICENSE). Copyright (c) 2013 Joshfire. All rights reserved.\n\nSee the [license](http://joshfire.github.io/woodman/about#license) section for details.",
  "readmeFilename": "README.md",
  "_id": "woodman@1.1.0",
  "_from": "woodman@1.1.0"
}
