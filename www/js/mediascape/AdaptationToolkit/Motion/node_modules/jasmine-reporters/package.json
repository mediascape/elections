{
  "author": {
    "name": "Larry Myers"
  },
  "name": "jasmine-reporters",
  "description": "Reporters for the Jasmine BDD Framework",
  "version": "2.0.6",
  "homepage": "https://github.com/larrymyers/jasmine-reporters",
  "maintainers": "Ben Loveridge <bloveridge@gmail.com>",
  "repository": {
    "type": "git",
    "url": "git://github.com/larrymyers/jasmine-reporters.git"
  },
  "dependencies": {
    "mkdirp": "~0.3.5"
  },
  "devDependencies": {},
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/larrymyers/jasmine-reporters/master/LICENSE"
    }
  ],
  "readme": "This branch is for Jasmine 2.x.\n[Switch to the 1.x branch.](https://github.com/larrymyers/jasmine-reporters/tree/jasmine1.x)\n\n# Jasmine Reporters\n\nJasmine Reporters is a collection of javascript jasmine.Reporter classes that can be used with\nthe [JasmineBDD testing framework](http://jasmine.github.io/).\n\nIncluded reporters:\n\n* JUnitXmlReporter - Report test results to a file in JUnit XML Report format.\n* NUnitXmlReporter - Report test results to a file in NUnit XML Report format.\n* TapReporter - Test Anything Protocol, report tests results to console.\n* TeamCityReporter - Basic reporter that outputs spec results to for the Teamcity build system.\n* TerminalReporter - Logs to a terminal (including colors) with variable verbosity.\n\n### PhantomJS\n\nShould work with all modern versions of Phantom JS, and has been tested with PhantomJS\n1.4.6 through 1.9.6 on Mac OS X. If you find issues with a particular version, please\nconsider creating a pull request.\n\n### Node.js\n\nThe reporters also work in Node.js, and most can be used in combination with\n[jasmine-node](https://github.com/mhevery/jasmine-node). Make sure to use the correct\ncombination of jasmine-reporters and jasmine-node, as both projects have different versions\n/ branches for Jasmine1.x vs Jasmine2.x support.\n\n# Basic Usage\n\nWhen used for in-browser tests, the reporters are registered on a `jasmineReporters` object in the\nglobal scope (i.e. `window.jasmineReporters`).\n\n    var junitReporter = new jasmineReporters.JUnitXmlReporter({\n        savePath: '..',\n        consolidateAll: false\n    });\n    jasmine.getEnv().addReporter(junitReporter);\n\n### PhantomJS\n\nIn order to write files to the local filesystem for in-browser tests, the reporters will attempt\nto use PhantomJS to create the files. A special method `__phantom_writeFile` is injected by the\nincluded `phantomjs.runner.sh` script.\n\nIt is strongly recommended to use the provided script to run your test suite using PhantomJS. If\nyou want to use your own PhantomJS runner, you will need to inject a `__phantom_writeFile`\nmethod, and also take care to correctly determine when all results have been reported.\n\nYou can use the included PhantomJS test runner to run any of the included examples.\n\n    bin/phantomjs.runner.sh test/tap_reporter.html\n    bin/phantomjs.runner.sh test/junit_xml_reporter.html\n\n### NodeJS\n\nIn Node.js, jasmine-reporters exports an object with all the reporters which you can use\nhowever you like.\n\n    var reporters = require('jasmine-reporters');\n    var junitReporter = new reporters.JUnitXmlReporter({\n        savePath: __dirname,\n        consolidateAll: false\n    });\n\n### More examples\n\nAn example for each reporter is available in the `test` directory.\n\n# Changes in jasmine-reporters@2.0\n\njasmine-reporters is built for Jasmine 2.x. If you are still using Jasmine 1.x, please use\nthe correct tag / branch / npm version:\n\n* bower: `bower install jasmine-reporters#^1.0.0`\n* Node.js: `npm install jasmine-reporters@^1.0.0`\n* git submodule: `git submodule add -b jasmine1.x git@github.com:larrymyers/jasmine-reporters.git jasmine-reporters`\n* or use any of the `1.*` tags\n\n## Migrating from jasmine-reporters@1.0\n\n* reporters are no longer registered on the global `jasmine` object\n    * 1.x: `new jasmine.JUnitXmlReporter( /* ... */ );`\n    * 2.x: `new jasmineReporters.JUnitXmlReporter( /* ... */ );`\n* configurable reporters no longer use positional arguments\n    * 1.x: `new jasmine.JUnitXmlReporter('testresults', true, true, 'junit-', true);`\n    * 2.x: `new jasmineReporters.JUnitXmlReporter({savePath:'testresults', filePrefix: 'junit-', consolidateAll:true});`\n\n# Protractor\n\nAs of Protractor 1.6.0, protractor supports Jasmine 2 by specifying\n`framework: \"jasmine2\"` in your protractor.conf file.\n\nFirst, install a Jasmine 2.x-compatible of jasmine-reporters:\n\n    npm install --save-dev jasmine-reporters@^2.0.0\n\nThen set everything up inside your protractor.conf:\n\n    framework: \"jasmine2\",\n    onPrepare: function() {\n        var jasmineReporters = require('jasmine-reporters');\n        jasmine.getEnv().addReporter(new jasmineReporters.JUnitXmlReporter({\n            consolidateAll: true,\n            filePrefix: 'xmloutput',\n            savePath: 'testresults'\n        }));\n    }\n",
  "readmeFilename": "README.markdown",
  "bugs": {
    "url": "https://github.com/larrymyers/jasmine-reporters/issues"
  },
  "_id": "jasmine-reporters@2.0.6",
  "_from": "jasmine-reporters@2.0.6"
}
